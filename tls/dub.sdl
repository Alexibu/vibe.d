name "tls"
description "TLS stream implementations"

dependency "vibe-d:stream" version="*"

lflags "-L/usr/local/opt/openssl/lib" platform="osx"

targetType "library"
sourcePaths "."
importPaths "."

copyFiles "../lib/win-i386/libeay32.dll" "../lib/win-i386/ssleay32.dll" platform="windows-x86"
copyFiles "../lib/win-amd64/libeay32.dll" "../lib/win-amd64/ssleay32.dll" platform="windows-x86_64"

configuration "openssl-mscoff" {
	platforms "windows-x86_mscoff" "windows-x86_64" "windows-x86-ldc"
	dependency "openssl" version=">=1.0.0+1.0.0e"
	sourceFiles "../lib/win-i386-mscoff/libeay32.lib" "../lib/win-i386-mscoff/ssleay32.lib" platform="windows-x86"
	sourceFiles "../lib/win-amd64/libeay32.lib" "../lib/win-amd64/ssleay32.lib" platform="windows-x86_64"
}

configuration "openssl-windows" {
	sourceFiles "../lib/win-i386/eay.lib" "../lib/win-i386/ssl.lib" platform="windows-x86-dmd"
	dependency "openssl" version="~>1.0"
	platforms "windows"
}

configuration "openssl-posix" {
	platforms "posix"
	sourceFiles "openssl_version.d"
	preBuildCommands `rdmd --eval='
	auto dir = environment.get("DUB_PACKAGE_DIR");
	if (dir.buildPath("tls").exists)  {
		dir = dir.buildPath("tls");
	}
	auto opensslVersion = "0.0.0";
	try {
		const res = execute(["openssl", "version"]).output;
		if (res.canFind("OpenSSL ")) {
			opensslVersion = res.splitter(" ").dropOne.front.filter!(not!(std.uni.isAlpha)).text;
		}
	} catch (Exception e) { writeln("Warning: ", e); }
	text("module openssl_version;\nenum OPENSSL_VERSION=\"", opensslVersion, "\";").
		toFile(dir.buildPath("openssl_version.d"));
	'`
	dependency "openssl" version="~>1.0"
}

configuration "openssl-1.1" {
	platforms "posix"
	dependency "openssl" version="~>1.0"
	versions "VibeUseOpenSSL11"
}

configuration "openssl-0.9" {
	platforms "posix"
	dependency "openssl" version="~>1.0"
	versions "VibeUseOldOpenSSL"
}

configuration "botan" {
	dependency "botan" version="~>1.12.0"
}

configuration "notls" {
}
